type Query {
    listLoans(page: Int, size: Int, filterBy: String, sortBy: String): [Loan]
    getLoanById(id: ID!): Loan
    getLoansByUserId(id: ID!, page: Int=0, size: Int=20, filterBy: String, sortBy: String): LoanByUserResponse
    getLoansThisWeek: Int
    getPendingLoans: Int
    getLoanAverageAmount: Float
    getLoans(page: Int=0, size: Int=20, filterBy: String, sortBy: String): LoanResponsePagedDTO
    getTotalLoans: Int

    listReceipts(page: Int=1, size: Int=20, filterBy: String, sortBy: String): ReceiptPage
    getReceiptById(id: ID!): Receipt
    getFiscalizedThisWeek(page: Int=1, size: Int=20, filterBy: String, sortBy: String, tenantId: Int): ReceiptPage
    getPendingThisWeek(page: Int=1, size: Int=20, filterBy: String, sortBy: String, tenantId: Int): ReceiptPage
    getCancelledThisWeek(page: Int=1, size: Int=20, filterBy: String, sortBy: String, tenantId: Int): ReceiptPage
    getTodaysTransactions(page: Int=1, size: Int=20, filterBy: String, sortBy: String, tenantId: Int): TodayResponse
    getWeeklyByType(tenantId: Int): WeeklyByTypeResponse
    getLatestReceipts: [Receipt]
    getTodaysTransactionsCount: Int
    getWeeklyTransactionsCount: Int
    getMonthlyTransactionsCount: Int
    getAverageReceiptsPerDay: Float

    listUsers(page: Int, size: Int): [User]
    getUserById(id: Int!): User

    listSubsidies(page: Int, size: Int, filterBy: String, sortBy: String): SubsidyPage
    getSubsidyById(id: ID!): Subsidy
    getSubsidiesByUserId(id: ID!, page: Int, size: Int, filterBy: String, sortBy: String): SubsidyPage
    getPendingSubsidies(page: Int=1, size: Int=10000): SubsidyPage
    getWeeklySubsidies(page: Int=1, size: Int=10000): SubsidyPage
}

type Mutation {
    publishLoan(loan: LoanInput): Loan
    approveLoan(id: ID): Loan
    rejectLoan(id: ID): Loan

    publishReceipt(receipt: ReceiptInput): Receipt
    publishUser(user: UserInput): User
    updateUser(user: UserInput): User

    publishSubsidy(subsidy: SubsidyInput): Subsidy
    approveSubsidy(id: ID!): Subsidy
    rejectSubsidy(id: ID!): Subsidy
}

type Loan {
    id: ID
    borrowerId: Int!
    amount: Int!
    interestRate: Float!
    status: LoanStatus!
    timestamp: String
}

type User {
    id: ID
    first_name: String
    last_name: String
    email: String
    emailToken: String
    emailVerified: Boolean
    password: String
    passwordToken: String
}

input UserInput {
    id: ID
    first_name: String
    last_name: String
    email: String
    emailToken: String
    emailVerified: Boolean
    password: String
    passwordToken: String
}

input LoanInput {
    id: ID
    borrowerId: Int!
    amount: Int!
    interestRate: Float!
}

type Item {
    id: ID
    name: String
    unitPrice: Float
    quantity: Int
    totalPrice: Float
}

input ItemInput {
    id: ID
    name: String!
    unitPrice: Float!
    quantity: Int!
    totalPrice: Float
}


type Receipt {
    id: ID
    total: Float
    items: [Item]
    fiscalCode: String
    signature: String
    timestamp: String
    status: String
    paymentType: String
    taxAmount: Float!
}

input ReceiptInput {
    id: ID
    total: Float
    items: [ItemInput]
    fiscalCode: String
    signature: String
    LocalDateTime: String
    status: String
    paymentType: String
    taxAmount: Float!
}

type SubsidyGrant {
    id: ID
    name: String!
    grantingAuthority: String!
    description: String
}

input SubsidyGrantInput {
    name: String!
    grantingAuthority: String!
    description: String
}

type Subsidy {
    id: ID
    grant: SubsidyGrant!
    recipientId: Int
    amount: Float!
    approvalDate: String
    validUntil: String
    status: SubsidyStatus
    timestamp: String
}

input SubsidyInput {
    grant: SubsidyGrantInput!
    recipientId: Int!
    amount: Float!
}

enum LoanStatus {
    PENDING,
    REJECTED,
    APPROVED,
    ISSUED
}

enum SubsidyStatus {
    PENDING
    ACCEPTED
    REJECTED
}

type ReceiptResponse {
    data: [Receipt]
    count: Int
}

type TodayDTOList {
    status: String
    count: Int
}

type TodayResponse {
    todayDTOList: [TodayDTOList]
}

type WeeklyByType {
    id: ID,
    label: String,
    value: Int,
    color: String
}

type WeeklyByTypeResponse {
    weeklyByType: [WeeklyByType]
}

type LoanByUserResponse {
    data: [Loan]
}

type SubsidyPage {
    content: [Subsidy]
    totalPages: Int
    totalElements: Int
    size: Int
    number: Int
    numberOfElements: Int
    first: Boolean
    last: Boolean
    empty: Boolean
}

type ReceiptPage {
    content: [Receipt]
    totalPages: Int
    totalElements: Int
    size: Int
    number: Int
    numberOfElements: Int
    first: Boolean
    last: Boolean
    empty: Boolean
}

type LoanResponsePagedDTO {
    loans: [Loan!]!
    totalPages: Int!
    totalElements: Int!
    size: Int!
    number: Int!
    numberOfElements: Int!
    first: Boolean!
    last: Boolean!
    empty: Boolean!
}