type Query {
    listLoans(page: Int, size: Int): [Loan]
    loanById(id: ID!): [Loan]
    listReceipts(page: Int, size: Int): [Receipt]
    listUsers(page: Int, size: Int): [User]
}

type Mutation {
    publishLoan(loan: LoanInput): Loan
    approveLoan(id: ID): Loan
    rejectLoan(id: ID): Loan

    publishReceipt(receipt: ReceiptInput): Receipt
    publishUser(user: UserInput): User
}

type Loan {
    id: ID
    borrowerId: Int!
    amount: Int!
    interestRate: Float!
    status: LoanStatus!
}

type User {
    id: ID
    first_name: String
    last_name: String
    email: String
    emailToken: String
    emailVerified: Boolean
    password: String
    passwordToken: String
}

input UserInput {
    first_name: String!
    last_name: String!
    email: String!
    emailToken: String
    emailVerified: Boolean
    password: String!
    passwordToken: String
}

input LoanInput {
    borrowerId: Int!
    amount: Int!
    interestRate: Float!
}

type Item {
    id: ID
    name: String
    unitPrice: Float
    quantity: Int
    totalPrice: Float
}

input ItemInput {
    name: String!
    unitPrice: Float!
    quantity: Int!
    totalPrice: Float
}


type Receipt {
    id: ID
    total: Float
    items: [Item]
    fiscalCode: String
    signature: String
    LocalDateTime: String
    status: String
    paymentType: String
    taxAmount: Float!
}

input ReceiptInput {
    total: Float
    items: [ItemInput]
    fiscalCode: String
    signature: String
    LocalDateTime: String
    status: String
    paymentType: String
    taxAmount: Float!
}

enum LoanStatus {
    PENDING,
    REJECTED,
    APPROVED,
    ISSUED
}